# -*- coding: utf-8 -*-
"""Hash map using separate_chaining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KWfXhwnzn2op7_C_oLa7yICEJshsKVva
"""

from linked_list import Node, LinkedList
from blossom_lib import flower_definitions

class HashMap:
  def __init__(self, size):
    self.array_size = size
    self.array = [LinkedList() for i in range(self.array_size)]

  def hash(self,key): 
    key_bytes = key.encode()
    hash_code = sum(key_bytes)
    return hash_code
  
  def compress(self, hash_code): 
    return hash_code % self.array_size
  
  def assign(self, key, value): 
    array_index = self.compress(self.hash(key))
    payload = Node([key, value])
    list_at_array = self.array[array_index]
    for item in list_at_array: 
      if item[0] == key:
        item[1] = value
    list_at_array.insert(payload)

  def retrieve(self, key): 
    array_index = self.compress(self.hash(key))
    list_at_index = self.array[array_index]
    for item in list_at_index: 
      if item[0] == key:
        return item[1]
      else: 
        return None 

blossom = HashMap(len(flower_definitions))
for flow in flower_definitions: 
  blossom.assign(flow[0], flow[1])

print(blossom.retrieve('periwinkle'))